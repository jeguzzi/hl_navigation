#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import (ParameterGenerator, double_t,
                                                            str_t, bool_t)

PACKAGE = "hl_navigation"

gen = ParameterGenerator()

gen.add("optimal_speed", double_t, 0,
        "The horizontal speed at which a free agent should move", 0.3, 0, 2)
gen.add("optimal_vertical_speed", double_t, 0,
        "The vertical speed at which a free agent should move", 0.1, 0, 1)
gen.add("optimal_angular_speed", double_t, 0,
        "The angular speed at which a free agent should move", 0.3, 0, 2)
gen.add("optimal_rotation_speed", double_t, 0,
        "The angular speed at which a free wheeled agent should turn", 0.3, 0, 2)
gen.add("tau_z", double_t, 0,
        "The relaxation constant on vertical velocity", 1.0, 0.25, 2)

gen.add("tau", double_t, 0, "tau", 0.5, 0.125, 2)
gen.add("eta", double_t, 0, "eta", 0.5, 0.125, 2)
gen.add("rotation_tau", double_t, 0, "rotation tau", 0.5, 0.125, 2)
gen.add("horizon", double_t, 0, "horizon", 1, 0, 10)
gen.add("time_horizon", double_t, 0, "time horizon", 1, 0, 10)
gen.add("safety_margin", double_t, 0, "safety margin", 0.1, 0, 1)
gen.add("aperture", double_t, 0, "aperture", 3.14, 0, 3.14)
gen.add("resolution", double_t, 0, "resolution", 30, 1, 100)
gen.add("drawing", bool_t, 0, "drawing enable", False)
gen.add("tol_angle", double_t, 0, "angle tol", 0.1, 0.01, 3)
gen.add("tol_distance", double_t, 0, "distance tol", 0.2, 0.05, 1)
gen.add("point_toward_target", bool_t, 0, "rotate towards target for HOLONOMIC agents", False)
gen.add("minimal_speed", double_t, 0, "minimal speed to trigger breaking", 0.05, 0.01, 0.5)

algo_enum = gen.enum([gen.const("HL", str_t, "HL", "HL"),
                      gen.const("ORCA", str_t, "ORCA", "ORCA"),
                      gen.const("HRVO", str_t, "HRVO", "HRVO")],
                     "An enum to set algo")

gen.add("behavior", str_t, 0, "The navigation algorithm", "HL", edit_method=algo_enum)

exit(gen.generate(PACKAGE, "hl_navigation", "Navigation"))
